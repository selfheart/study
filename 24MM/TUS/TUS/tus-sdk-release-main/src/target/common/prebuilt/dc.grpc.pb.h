// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dc.proto
// Original file comments:
// TMC CONFIDENTIAL
// $TUSLibId$
// Copyright (C) 2022 TOYOTA MOTOR CORPORATION
// All Rights Reserved.
//
// for gRPC server on a DC
#ifndef GRPC_dc_2eproto__INCLUDED
#define GRPC_dc_2eproto__INCLUDED

#include "dc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace TUS {

class DomainController final {
 public:
  static constexpr char const* service_full_name() {
    return "TUS.DomainController";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::TUS::Versions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>> AsyncGetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>>(AsyncGetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>> PrepareAsyncGetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>>(PrepareAsyncGetVersionsRaw(context, request, cq));
    }
    virtual ::grpc::Status Execute(::grpc::ClientContext* context, const ::TUS::Script& request, ::TUS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> AsyncExecute(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    virtual ::grpc::Status PollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::TUS::Updates* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>> AsyncPollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>>(AsyncPollEnvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>> PrepareAsyncPollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>>(PrepareAsyncPollEnvRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::TUS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> AsyncExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(AsyncExecuteAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> PrepareAsyncExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(PrepareAsyncExecuteAsyncRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::TUS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> AsyncSetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(AsyncSetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>> PrepareAsyncSetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>>(PrepareAsyncSetEnvironmentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>* AsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Versions>* PrepareAsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>* AsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Updates>* PrepareAsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* AsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* PrepareAsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* AsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TUS::Response>* PrepareAsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::TUS::Versions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Versions>> AsyncGetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Versions>>(AsyncGetVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Versions>> PrepareAsyncGetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Versions>>(PrepareAsyncGetVersionsRaw(context, request, cq));
    }
    ::grpc::Status Execute(::grpc::ClientContext* context, const ::TUS::Script& request, ::TUS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> AsyncExecute(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    ::grpc::Status PollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::TUS::Updates* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Updates>> AsyncPollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Updates>>(AsyncPollEnvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Updates>> PrepareAsyncPollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Updates>>(PrepareAsyncPollEnvRaw(context, request, cq));
    }
    ::grpc::Status ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::TUS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> AsyncExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(AsyncExecuteAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> PrepareAsyncExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(PrepareAsyncExecuteAsyncRaw(context, request, cq));
    }
    ::grpc::Status SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::TUS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> AsyncSetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(AsyncSetEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>> PrepareAsyncSetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TUS::Response>>(PrepareAsyncSetEnvironmentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, std::function<void(::grpc::Status)>) override;
      void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, std::function<void(::grpc::Status)>) override;
      void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TUS::Versions>* AsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Versions>* PrepareAsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Updates>* AsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Updates>* PrepareAsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* AsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* PrepareAsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* AsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TUS::Response>* PrepareAsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_Execute_;
    const ::grpc::internal::RpcMethod rpcmethod_PollEnv_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteAsync_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEnvironment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetVersions(::grpc::ServerContext* context, const ::TUS::Names* request, ::TUS::Versions* response);
    virtual ::grpc::Status Execute(::grpc::ServerContext* context, const ::TUS::Script* request, ::TUS::Response* response);
    virtual ::grpc::Status PollEnv(::grpc::ServerContext* context, const ::TUS::Session* request, ::TUS::Updates* response);
    virtual ::grpc::Status ExecuteAsync(::grpc::ServerContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response);
    virtual ::grpc::Status SetEnvironment(::grpc::ServerContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVersions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersions(::grpc::ServerContext* context, ::TUS::Names* request, ::grpc::ServerAsyncResponseWriter< ::TUS::Versions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Execute() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::TUS::Script* request, ::grpc::ServerAsyncResponseWriter< ::TUS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PollEnv() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollEnv(::grpc::ServerContext* context, ::TUS::Session* request, ::grpc::ServerAsyncResponseWriter< ::TUS::Updates>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteAsync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAsync(::grpc::ServerContext* context, ::TUS::ExecuteAsyncParams* request, ::grpc::ServerAsyncResponseWriter< ::TUS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEnvironment() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEnvironment(::grpc::ServerContext* context, ::TUS::SetEnvironmentParams* request, ::grpc::ServerAsyncResponseWriter< ::TUS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetVersions<WithAsyncMethod_Execute<WithAsyncMethod_PollEnv<WithAsyncMethod_ExecuteAsync<WithAsyncMethod_SetEnvironment<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVersions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Names, ::TUS::Versions>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TUS::Names* request, ::TUS::Versions* response) { return this->GetVersions(context, request, response); }));}
    void SetMessageAllocatorFor_GetVersions(
        ::grpc::experimental::MessageAllocator< ::TUS::Names, ::TUS::Versions>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Names, ::TUS::Versions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Execute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Script, ::TUS::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TUS::Script* request, ::TUS::Response* response) { return this->Execute(context, request, response); }));}
    void SetMessageAllocatorFor_Execute(
        ::grpc::experimental::MessageAllocator< ::TUS::Script, ::TUS::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Script, ::TUS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Execute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PollEnv() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Session, ::TUS::Updates>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TUS::Session* request, ::TUS::Updates* response) { return this->PollEnv(context, request, response); }));}
    void SetMessageAllocatorFor_PollEnv(
        ::grpc::experimental::MessageAllocator< ::TUS::Session, ::TUS::Updates>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TUS::Session, ::TUS::Updates>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PollEnv(
      ::grpc::CallbackServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PollEnv(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExecuteAsync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TUS::ExecuteAsyncParams, ::TUS::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response) { return this->ExecuteAsync(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteAsync(
        ::grpc::experimental::MessageAllocator< ::TUS::ExecuteAsyncParams, ::TUS::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TUS::ExecuteAsyncParams, ::TUS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteAsync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::TUS::SetEnvironmentParams, ::TUS::Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response) { return this->SetEnvironment(context, request, response); }));}
    void SetMessageAllocatorFor_SetEnvironment(
        ::grpc::experimental::MessageAllocator< ::TUS::SetEnvironmentParams, ::TUS::Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::TUS::SetEnvironmentParams, ::TUS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetVersions<ExperimentalWithCallbackMethod_Execute<ExperimentalWithCallbackMethod_PollEnv<ExperimentalWithCallbackMethod_ExecuteAsync<ExperimentalWithCallbackMethod_SetEnvironment<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetVersions<ExperimentalWithCallbackMethod_Execute<ExperimentalWithCallbackMethod_PollEnv<ExperimentalWithCallbackMethod_ExecuteAsync<ExperimentalWithCallbackMethod_SetEnvironment<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVersions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Execute() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PollEnv() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteAsync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEnvironment() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVersions() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Execute() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PollEnv() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollEnv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteAsync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteAsync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEnvironment() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVersions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVersions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Execute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Execute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Execute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PollEnv() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PollEnv(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PollEnv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PollEnv(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExecuteAsync() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteAsync(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteAsync(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEnvironment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVersions() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TUS::Names, ::TUS::Versions>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TUS::Names, ::TUS::Versions>* streamer) {
                       return this->StreamedGetVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVersions(::grpc::ServerContext* /*context*/, const ::TUS::Names* /*request*/, ::TUS::Versions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TUS::Names,::TUS::Versions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Execute() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TUS::Script, ::TUS::Response>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TUS::Script, ::TUS::Response>* streamer) {
                       return this->StreamedExecute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::TUS::Script* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TUS::Script,::TUS::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PollEnv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PollEnv() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TUS::Session, ::TUS::Updates>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TUS::Session, ::TUS::Updates>* streamer) {
                       return this->StreamedPollEnv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PollEnv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PollEnv(::grpc::ServerContext* /*context*/, const ::TUS::Session* /*request*/, ::TUS::Updates* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPollEnv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TUS::Session,::TUS::Updates>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteAsync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TUS::ExecuteAsyncParams, ::TUS::Response>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TUS::ExecuteAsyncParams, ::TUS::Response>* streamer) {
                       return this->StreamedExecuteAsync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteAsync(::grpc::ServerContext* /*context*/, const ::TUS::ExecuteAsyncParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteAsync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TUS::ExecuteAsyncParams,::TUS::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEnvironment() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TUS::SetEnvironmentParams, ::TUS::Response>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::TUS::SetEnvironmentParams, ::TUS::Response>* streamer) {
                       return this->StreamedSetEnvironment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEnvironment(::grpc::ServerContext* /*context*/, const ::TUS::SetEnvironmentParams* /*request*/, ::TUS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TUS::SetEnvironmentParams,::TUS::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetVersions<WithStreamedUnaryMethod_Execute<WithStreamedUnaryMethod_PollEnv<WithStreamedUnaryMethod_ExecuteAsync<WithStreamedUnaryMethod_SetEnvironment<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetVersions<WithStreamedUnaryMethod_Execute<WithStreamedUnaryMethod_PollEnv<WithStreamedUnaryMethod_ExecuteAsync<WithStreamedUnaryMethod_SetEnvironment<Service > > > > > StreamedService;
};

}  // namespace TUS


#endif  // GRPC_dc_2eproto__INCLUDED
