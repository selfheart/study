// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dc.proto

#include "dc.pb.h"
#include "dc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TUS {

static const char* DomainController_method_names[] = {
  "/TUS.DomainController/GetVersions",
  "/TUS.DomainController/Execute",
  "/TUS.DomainController/PollEnv",
  "/TUS.DomainController/ExecuteAsync",
  "/TUS.DomainController/SetEnvironment",
};

std::unique_ptr< DomainController::Stub> DomainController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DomainController::Stub> stub(new DomainController::Stub(channel));
  return stub;
}

DomainController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetVersions_(DomainController_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(DomainController_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PollEnv_(DomainController_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteAsync_(DomainController_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEnvironment_(DomainController_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DomainController::Stub::GetVersions(::grpc::ClientContext* context, const ::TUS::Names& request, ::TUS::Versions* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersions_, context, request, response);
}

void DomainController::Stub::experimental_async::GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersions_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersions_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::GetVersions(::grpc::ClientContext* context, const ::TUS::Names* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersions_, context, request, response, reactor);
}

void DomainController::Stub::experimental_async::GetVersions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Versions* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TUS::Versions>* DomainController::Stub::AsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Versions>::Create(channel_.get(), cq, rpcmethod_GetVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TUS::Versions>* DomainController::Stub::PrepareAsyncGetVersionsRaw(::grpc::ClientContext* context, const ::TUS::Names& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Versions>::Create(channel_.get(), cq, rpcmethod_GetVersions_, context, request, false);
}

::grpc::Status DomainController::Stub::Execute(::grpc::ClientContext* context, const ::TUS::Script& request, ::TUS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Execute_, context, request, response);
}

void DomainController::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::TUS::Script* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

void DomainController::Stub::experimental_async::Execute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::TUS::Script& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, false);
}

::grpc::Status DomainController::Stub::PollEnv(::grpc::ClientContext* context, const ::TUS::Session& request, ::TUS::Updates* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PollEnv_, context, request, response);
}

void DomainController::Stub::experimental_async::PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PollEnv_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PollEnv_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::PollEnv(::grpc::ClientContext* context, const ::TUS::Session* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PollEnv_, context, request, response, reactor);
}

void DomainController::Stub::experimental_async::PollEnv(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Updates* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PollEnv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TUS::Updates>* DomainController::Stub::AsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Updates>::Create(channel_.get(), cq, rpcmethod_PollEnv_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TUS::Updates>* DomainController::Stub::PrepareAsyncPollEnvRaw(::grpc::ClientContext* context, const ::TUS::Session& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Updates>::Create(channel_.get(), cq, rpcmethod_PollEnv_, context, request, false);
}

::grpc::Status DomainController::Stub::ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::TUS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteAsync_, context, request, response);
}

void DomainController::Stub::experimental_async::ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteAsync_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteAsync_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::ExecuteAsync(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteAsync_, context, request, response, reactor);
}

void DomainController::Stub::experimental_async::ExecuteAsync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteAsync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::AsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_ExecuteAsync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::PrepareAsyncExecuteAsyncRaw(::grpc::ClientContext* context, const ::TUS::ExecuteAsyncParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_ExecuteAsync_, context, request, false);
}

::grpc::Status DomainController::Stub::SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::TUS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEnvironment_, context, request, response);
}

void DomainController::Stub::experimental_async::SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEnvironment_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEnvironment_, context, request, response, std::move(f));
}

void DomainController::Stub::experimental_async::SetEnvironment(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEnvironment_, context, request, response, reactor);
}

void DomainController::Stub::experimental_async::SetEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TUS::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEnvironment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::AsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_SetEnvironment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TUS::Response>* DomainController::Stub::PrepareAsyncSetEnvironmentRaw(::grpc::ClientContext* context, const ::TUS::SetEnvironmentParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TUS::Response>::Create(channel_.get(), cq, rpcmethod_SetEnvironment_, context, request, false);
}

DomainController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DomainController_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DomainController::Service, ::TUS::Names, ::TUS::Versions>(
          [](DomainController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TUS::Names* req,
             ::TUS::Versions* resp) {
               return service->GetVersions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DomainController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DomainController::Service, ::TUS::Script, ::TUS::Response>(
          [](DomainController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TUS::Script* req,
             ::TUS::Response* resp) {
               return service->Execute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DomainController_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DomainController::Service, ::TUS::Session, ::TUS::Updates>(
          [](DomainController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TUS::Session* req,
             ::TUS::Updates* resp) {
               return service->PollEnv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DomainController_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DomainController::Service, ::TUS::ExecuteAsyncParams, ::TUS::Response>(
          [](DomainController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TUS::ExecuteAsyncParams* req,
             ::TUS::Response* resp) {
               return service->ExecuteAsync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DomainController_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DomainController::Service, ::TUS::SetEnvironmentParams, ::TUS::Response>(
          [](DomainController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::TUS::SetEnvironmentParams* req,
             ::TUS::Response* resp) {
               return service->SetEnvironment(ctx, req, resp);
             }, this)));
}

DomainController::Service::~Service() {
}

::grpc::Status DomainController::Service::GetVersions(::grpc::ServerContext* context, const ::TUS::Names* request, ::TUS::Versions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DomainController::Service::Execute(::grpc::ServerContext* context, const ::TUS::Script* request, ::TUS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DomainController::Service::PollEnv(::grpc::ServerContext* context, const ::TUS::Session* request, ::TUS::Updates* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DomainController::Service::ExecuteAsync(::grpc::ServerContext* context, const ::TUS::ExecuteAsyncParams* request, ::TUS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DomainController::Service::SetEnvironment(::grpc::ServerContext* context, const ::TUS::SetEnvironmentParams* request, ::TUS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TUS

