// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dc_2eproto;
namespace TUS {
class AsyncResult;
class AsyncResultDefaultTypeInternal;
extern AsyncResultDefaultTypeInternal _AsyncResult_default_instance_;
class ExecuteAsyncParams;
class ExecuteAsyncParamsDefaultTypeInternal;
extern ExecuteAsyncParamsDefaultTypeInternal _ExecuteAsyncParams_default_instance_;
class Names;
class NamesDefaultTypeInternal;
extern NamesDefaultTypeInternal _Names_default_instance_;
class PairedStr;
class PairedStrDefaultTypeInternal;
extern PairedStrDefaultTypeInternal _PairedStr_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Script;
class ScriptDefaultTypeInternal;
extern ScriptDefaultTypeInternal _Script_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SetEnvironmentParams;
class SetEnvironmentParamsDefaultTypeInternal;
extern SetEnvironmentParamsDefaultTypeInternal _SetEnvironmentParams_default_instance_;
class Updates;
class UpdatesDefaultTypeInternal;
extern UpdatesDefaultTypeInternal _Updates_default_instance_;
class Versions;
class VersionsDefaultTypeInternal;
extern VersionsDefaultTypeInternal _Versions_default_instance_;
}  // namespace TUS
PROTOBUF_NAMESPACE_OPEN
template<> ::TUS::AsyncResult* Arena::CreateMaybeMessage<::TUS::AsyncResult>(Arena*);
template<> ::TUS::ExecuteAsyncParams* Arena::CreateMaybeMessage<::TUS::ExecuteAsyncParams>(Arena*);
template<> ::TUS::Names* Arena::CreateMaybeMessage<::TUS::Names>(Arena*);
template<> ::TUS::PairedStr* Arena::CreateMaybeMessage<::TUS::PairedStr>(Arena*);
template<> ::TUS::Response* Arena::CreateMaybeMessage<::TUS::Response>(Arena*);
template<> ::TUS::Script* Arena::CreateMaybeMessage<::TUS::Script>(Arena*);
template<> ::TUS::Session* Arena::CreateMaybeMessage<::TUS::Session>(Arena*);
template<> ::TUS::SetEnvironmentParams* Arena::CreateMaybeMessage<::TUS::SetEnvironmentParams>(Arena*);
template<> ::TUS::Updates* Arena::CreateMaybeMessage<::TUS::Updates>(Arena*);
template<> ::TUS::Versions* Arena::CreateMaybeMessage<::TUS::Versions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TUS {

// ===================================================================

class Names PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Names) */ {
 public:
  inline Names() : Names(nullptr) {};
  virtual ~Names();

  Names(const Names& from);
  Names(Names&& from) noexcept
    : Names() {
    *this = ::std::move(from);
  }

  inline Names& operator=(const Names& from) {
    CopyFrom(from);
    return *this;
  }
  inline Names& operator=(Names&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Names& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Names* internal_default_instance() {
    return reinterpret_cast<const Names*>(
               &_Names_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Names& a, Names& b) {
    a.Swap(&b);
  }
  inline void Swap(Names* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Names* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Names* New() const final {
    return CreateMaybeMessage<Names>(nullptr);
  }

  Names* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Names>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Names& from);
  void MergeFrom(const Names& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Names* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Names";
  }
  protected:
  explicit Names(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:TUS.Names)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class Versions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Versions) */ {
 public:
  inline Versions() : Versions(nullptr) {};
  virtual ~Versions();

  Versions(const Versions& from);
  Versions(Versions&& from) noexcept
    : Versions() {
    *this = ::std::move(from);
  }

  inline Versions& operator=(const Versions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Versions& operator=(Versions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Versions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Versions* internal_default_instance() {
    return reinterpret_cast<const Versions*>(
               &_Versions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Versions& a, Versions& b) {
    a.Swap(&b);
  }
  inline void Swap(Versions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Versions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Versions* New() const final {
    return CreateMaybeMessage<Versions>(nullptr);
  }

  Versions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Versions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Versions& from);
  void MergeFrom(const Versions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Versions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Versions";
  }
  protected:
  explicit Versions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // repeated .TUS.PairedStr pairs = 2;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::TUS::PairedStr* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >*
      mutable_pairs();
  private:
  const ::TUS::PairedStr& _internal_pairs(int index) const;
  ::TUS::PairedStr* _internal_add_pairs();
  public:
  const ::TUS::PairedStr& pairs(int index) const;
  ::TUS::PairedStr* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >&
      pairs() const;

  // int32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TUS.Versions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr > pairs_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultTextFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // string result_text = 2;
  void clear_result_text();
  const std::string& result_text() const;
  void set_result_text(const std::string& value);
  void set_result_text(std::string&& value);
  void set_result_text(const char* value);
  void set_result_text(const char* value, size_t size);
  std::string* mutable_result_text();
  std::string* release_result_text();
  void set_allocated_result_text(std::string* result_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_text(
      std::string* result_text);
  private:
  const std::string& _internal_result_text() const;
  void _internal_set_result_text(const std::string& value);
  std::string* _internal_mutable_result_text();
  public:

  // int32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TUS.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_text_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class Script PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Script) */ {
 public:
  inline Script() : Script(nullptr) {};
  virtual ~Script();

  Script(const Script& from);
  Script(Script&& from) noexcept
    : Script() {
    *this = ::std::move(from);
  }

  inline Script& operator=(const Script& from) {
    CopyFrom(from);
    return *this;
  }
  inline Script& operator=(Script&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Script& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Script* internal_default_instance() {
    return reinterpret_cast<const Script*>(
               &_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Script& a, Script& b) {
    a.Swap(&b);
  }
  inline void Swap(Script* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Script* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Script* New() const final {
    return CreateMaybeMessage<Script>(nullptr);
  }

  Script* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Script>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Script& from);
  void MergeFrom(const Script& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Script* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Script";
  }
  protected:
  explicit Script(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
    kBodyFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // string parameters = 1;
  void clear_parameters();
  const std::string& parameters() const;
  void set_parameters(const std::string& value);
  void set_parameters(std::string&& value);
  void set_parameters(const char* value);
  void set_parameters(const char* value, size_t size);
  std::string* mutable_parameters();
  std::string* release_parameters();
  void set_allocated_parameters(std::string* parameters);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parameters();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parameters(
      std::string* parameters);
  private:
  const std::string& _internal_parameters() const;
  void _internal_set_parameters(const std::string& value);
  std::string* _internal_mutable_parameters();
  public:

  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:TUS.Script)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class PairedStr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.PairedStr) */ {
 public:
  inline PairedStr() : PairedStr(nullptr) {};
  virtual ~PairedStr();

  PairedStr(const PairedStr& from);
  PairedStr(PairedStr&& from) noexcept
    : PairedStr() {
    *this = ::std::move(from);
  }

  inline PairedStr& operator=(const PairedStr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairedStr& operator=(PairedStr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairedStr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairedStr* internal_default_instance() {
    return reinterpret_cast<const PairedStr*>(
               &_PairedStr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PairedStr& a, PairedStr& b) {
    a.Swap(&b);
  }
  inline void Swap(PairedStr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairedStr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairedStr* New() const final {
    return CreateMaybeMessage<PairedStr>(nullptr);
  }

  PairedStr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairedStr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairedStr& from);
  void MergeFrom(const PairedStr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairedStr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.PairedStr";
  }
  protected:
  explicit PairedStr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:TUS.PairedStr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class AsyncResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.AsyncResult) */ {
 public:
  inline AsyncResult() : AsyncResult(nullptr) {};
  virtual ~AsyncResult();

  AsyncResult(const AsyncResult& from);
  AsyncResult(AsyncResult&& from) noexcept
    : AsyncResult() {
    *this = ::std::move(from);
  }

  inline AsyncResult& operator=(const AsyncResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsyncResult& operator=(AsyncResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsyncResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsyncResult* internal_default_instance() {
    return reinterpret_cast<const AsyncResult*>(
               &_AsyncResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AsyncResult& a, AsyncResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AsyncResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsyncResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsyncResult* New() const final {
    return CreateMaybeMessage<AsyncResult>(nullptr);
  }

  AsyncResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsyncResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsyncResult& from);
  void MergeFrom(const AsyncResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.AsyncResult";
  }
  protected:
  explicit AsyncResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultTextFieldNumber = 3,
    kTagFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // string result_text = 3;
  void clear_result_text();
  const std::string& result_text() const;
  void set_result_text(const std::string& value);
  void set_result_text(std::string&& value);
  void set_result_text(const char* value);
  void set_result_text(const char* value, size_t size);
  std::string* mutable_result_text();
  std::string* release_result_text();
  void set_allocated_result_text(std::string* result_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result_text(
      std::string* result_text);
  private:
  const std::string& _internal_result_text() const;
  void _internal_set_result_text(const std::string& value);
  std::string* _internal_mutable_result_text();
  public:

  // uint32 tag = 1;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TUS.AsyncResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Session) */ {
 public:
  inline Session() : Session(nullptr) {};
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:TUS.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class Updates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.Updates) */ {
 public:
  inline Updates() : Updates(nullptr) {};
  virtual ~Updates();

  Updates(const Updates& from);
  Updates(Updates&& from) noexcept
    : Updates() {
    *this = ::std::move(from);
  }

  inline Updates& operator=(const Updates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Updates& operator=(Updates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Updates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Updates* internal_default_instance() {
    return reinterpret_cast<const Updates*>(
               &_Updates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Updates& a, Updates& b) {
    a.Swap(&b);
  }
  inline void Swap(Updates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Updates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Updates* New() const final {
    return CreateMaybeMessage<Updates>(nullptr);
  }

  Updates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Updates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Updates& from);
  void MergeFrom(const Updates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Updates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.Updates";
  }
  protected:
  explicit Updates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 2,
    kAretsFieldNumber = 3,
    kResultCodeFieldNumber = 1,
  };
  // repeated .TUS.PairedStr pairs = 2;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::TUS::PairedStr* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >*
      mutable_pairs();
  private:
  const ::TUS::PairedStr& _internal_pairs(int index) const;
  ::TUS::PairedStr* _internal_add_pairs();
  public:
  const ::TUS::PairedStr& pairs(int index) const;
  ::TUS::PairedStr* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >&
      pairs() const;

  // repeated .TUS.AsyncResult arets = 3;
  int arets_size() const;
  private:
  int _internal_arets_size() const;
  public:
  void clear_arets();
  ::TUS::AsyncResult* mutable_arets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::AsyncResult >*
      mutable_arets();
  private:
  const ::TUS::AsyncResult& _internal_arets(int index) const;
  ::TUS::AsyncResult* _internal_add_arets();
  public:
  const ::TUS::AsyncResult& arets(int index) const;
  ::TUS::AsyncResult* add_arets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::AsyncResult >&
      arets() const;

  // int32 result_code = 1;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::int32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TUS.Updates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr > pairs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::AsyncResult > arets_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class ExecuteAsyncParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.ExecuteAsyncParams) */ {
 public:
  inline ExecuteAsyncParams() : ExecuteAsyncParams(nullptr) {};
  virtual ~ExecuteAsyncParams();

  ExecuteAsyncParams(const ExecuteAsyncParams& from);
  ExecuteAsyncParams(ExecuteAsyncParams&& from) noexcept
    : ExecuteAsyncParams() {
    *this = ::std::move(from);
  }

  inline ExecuteAsyncParams& operator=(const ExecuteAsyncParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteAsyncParams& operator=(ExecuteAsyncParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteAsyncParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteAsyncParams* internal_default_instance() {
    return reinterpret_cast<const ExecuteAsyncParams*>(
               &_ExecuteAsyncParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExecuteAsyncParams& a, ExecuteAsyncParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteAsyncParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteAsyncParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteAsyncParams* New() const final {
    return CreateMaybeMessage<ExecuteAsyncParams>(nullptr);
  }

  ExecuteAsyncParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteAsyncParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteAsyncParams& from);
  void MergeFrom(const ExecuteAsyncParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteAsyncParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.ExecuteAsyncParams";
  }
  protected:
  explicit ExecuteAsyncParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kTagFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // uint32 tag = 2;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TUS.ExecuteAsyncParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// -------------------------------------------------------------------

class SetEnvironmentParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TUS.SetEnvironmentParams) */ {
 public:
  inline SetEnvironmentParams() : SetEnvironmentParams(nullptr) {};
  virtual ~SetEnvironmentParams();

  SetEnvironmentParams(const SetEnvironmentParams& from);
  SetEnvironmentParams(SetEnvironmentParams&& from) noexcept
    : SetEnvironmentParams() {
    *this = ::std::move(from);
  }

  inline SetEnvironmentParams& operator=(const SetEnvironmentParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEnvironmentParams& operator=(SetEnvironmentParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEnvironmentParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEnvironmentParams* internal_default_instance() {
    return reinterpret_cast<const SetEnvironmentParams*>(
               &_SetEnvironmentParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetEnvironmentParams& a, SetEnvironmentParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEnvironmentParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEnvironmentParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetEnvironmentParams* New() const final {
    return CreateMaybeMessage<SetEnvironmentParams>(nullptr);
  }

  SetEnvironmentParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEnvironmentParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEnvironmentParams& from);
  void MergeFrom(const SetEnvironmentParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEnvironmentParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TUS.SetEnvironmentParams";
  }
  protected:
  explicit SetEnvironmentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dc_2eproto);
    return ::descriptor_table_dc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kSessionFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .TUS.Session session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::TUS::Session& session() const;
  ::TUS::Session* release_session();
  ::TUS::Session* mutable_session();
  void set_allocated_session(::TUS::Session* session);
  private:
  const ::TUS::Session& _internal_session() const;
  ::TUS::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::TUS::Session* session);
  ::TUS::Session* unsafe_arena_release_session();

  // @@protoc_insertion_point(class_scope:TUS.SetEnvironmentParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TUS::Session* session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Names

// repeated string name = 1;
inline int Names::_internal_name_size() const {
  return name_.size();
}
inline int Names::name_size() const {
  return _internal_name_size();
}
inline void Names::clear_name() {
  name_.Clear();
}
inline std::string* Names::add_name() {
  // @@protoc_insertion_point(field_add_mutable:TUS.Names.name)
  return _internal_add_name();
}
inline const std::string& Names::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& Names::name(int index) const {
  // @@protoc_insertion_point(field_get:TUS.Names.name)
  return _internal_name(index);
}
inline std::string* Names::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:TUS.Names.name)
  return name_.Mutable(index);
}
inline void Names::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TUS.Names.name)
  name_.Mutable(index)->assign(value);
}
inline void Names::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TUS.Names.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void Names::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TUS.Names.name)
}
inline void Names::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TUS.Names.name)
}
inline std::string* Names::_internal_add_name() {
  return name_.Add();
}
inline void Names::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TUS.Names.name)
}
inline void Names::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TUS.Names.name)
}
inline void Names::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TUS.Names.name)
}
inline void Names::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TUS.Names.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Names::name() const {
  // @@protoc_insertion_point(field_list:TUS.Names.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Names::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:TUS.Names.name)
  return &name_;
}

// -------------------------------------------------------------------

// Versions

// int32 result_code = 1;
inline void Versions::clear_result_code() {
  result_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Versions::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Versions::result_code() const {
  // @@protoc_insertion_point(field_get:TUS.Versions.result_code)
  return _internal_result_code();
}
inline void Versions::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_code_ = value;
}
inline void Versions::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:TUS.Versions.result_code)
}

// repeated .TUS.PairedStr pairs = 2;
inline int Versions::_internal_pairs_size() const {
  return pairs_.size();
}
inline int Versions::pairs_size() const {
  return _internal_pairs_size();
}
inline void Versions::clear_pairs() {
  pairs_.Clear();
}
inline ::TUS::PairedStr* Versions::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TUS.Versions.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >*
Versions::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TUS.Versions.pairs)
  return &pairs_;
}
inline const ::TUS::PairedStr& Versions::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::TUS::PairedStr& Versions::pairs(int index) const {
  // @@protoc_insertion_point(field_get:TUS.Versions.pairs)
  return _internal_pairs(index);
}
inline ::TUS::PairedStr* Versions::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::TUS::PairedStr* Versions::add_pairs() {
  // @@protoc_insertion_point(field_add:TUS.Versions.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >&
Versions::pairs() const {
  // @@protoc_insertion_point(field_list:TUS.Versions.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// Response

// int32 result_code = 1;
inline void Response::clear_result_code() {
  result_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::result_code() const {
  // @@protoc_insertion_point(field_get:TUS.Response.result_code)
  return _internal_result_code();
}
inline void Response::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_code_ = value;
}
inline void Response::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:TUS.Response.result_code)
}

// string result_text = 2;
inline void Response::clear_result_text() {
  result_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::result_text() const {
  // @@protoc_insertion_point(field_get:TUS.Response.result_text)
  return _internal_result_text();
}
inline void Response::set_result_text(const std::string& value) {
  _internal_set_result_text(value);
  // @@protoc_insertion_point(field_set:TUS.Response.result_text)
}
inline std::string* Response::mutable_result_text() {
  // @@protoc_insertion_point(field_mutable:TUS.Response.result_text)
  return _internal_mutable_result_text();
}
inline const std::string& Response::_internal_result_text() const {
  return result_text_.Get();
}
inline void Response::_internal_set_result_text(const std::string& value) {
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_result_text(std::string&& value) {
  
  result_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.Response.result_text)
}
inline void Response::set_result_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.Response.result_text)
}
inline void Response::set_result_text(const char* value,
    size_t size) {
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.Response.result_text)
}
inline std::string* Response::_internal_mutable_result_text() {
  
  return result_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_result_text() {
  // @@protoc_insertion_point(field_release:TUS.Response.result_text)
  return result_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_result_text(std::string* result_text) {
  if (result_text != nullptr) {
    
  } else {
    
  }
  result_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.Response.result_text)
}
inline std::string* Response::unsafe_arena_release_result_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.Response.result_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_result_text(
    std::string* result_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result_text != nullptr) {
    
  } else {
    
  }
  result_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.Response.result_text)
}

// -------------------------------------------------------------------

// Script

// string parameters = 1;
inline void Script::clear_parameters() {
  parameters_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Script::parameters() const {
  // @@protoc_insertion_point(field_get:TUS.Script.parameters)
  return _internal_parameters();
}
inline void Script::set_parameters(const std::string& value) {
  _internal_set_parameters(value);
  // @@protoc_insertion_point(field_set:TUS.Script.parameters)
}
inline std::string* Script::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:TUS.Script.parameters)
  return _internal_mutable_parameters();
}
inline const std::string& Script::_internal_parameters() const {
  return parameters_.Get();
}
inline void Script::_internal_set_parameters(const std::string& value) {
  
  parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Script::set_parameters(std::string&& value) {
  
  parameters_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.Script.parameters)
}
inline void Script::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.Script.parameters)
}
inline void Script::set_parameters(const char* value,
    size_t size) {
  
  parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.Script.parameters)
}
inline std::string* Script::_internal_mutable_parameters() {
  
  return parameters_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Script::release_parameters() {
  // @@protoc_insertion_point(field_release:TUS.Script.parameters)
  return parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_parameters(std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.Script.parameters)
}
inline std::string* Script::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.Script.parameters)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parameters_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Script::unsafe_arena_set_allocated_parameters(
    std::string* parameters) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parameters, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.Script.parameters)
}

// bytes body = 2;
inline void Script::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Script::body() const {
  // @@protoc_insertion_point(field_get:TUS.Script.body)
  return _internal_body();
}
inline void Script::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:TUS.Script.body)
}
inline std::string* Script::mutable_body() {
  // @@protoc_insertion_point(field_mutable:TUS.Script.body)
  return _internal_mutable_body();
}
inline const std::string& Script::_internal_body() const {
  return body_.Get();
}
inline void Script::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Script::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.Script.body)
}
inline void Script::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.Script.body)
}
inline void Script::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.Script.body)
}
inline std::string* Script::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Script::release_body() {
  // @@protoc_insertion_point(field_release:TUS.Script.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.Script.body)
}
inline std::string* Script::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.Script.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Script::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.Script.body)
}

// string session_id = 3;
inline void Script::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Script::session_id() const {
  // @@protoc_insertion_point(field_get:TUS.Script.session_id)
  return _internal_session_id();
}
inline void Script::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:TUS.Script.session_id)
}
inline std::string* Script::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:TUS.Script.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Script::_internal_session_id() const {
  return session_id_.Get();
}
inline void Script::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Script::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.Script.session_id)
}
inline void Script::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.Script.session_id)
}
inline void Script::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.Script.session_id)
}
inline std::string* Script::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Script::release_session_id() {
  // @@protoc_insertion_point(field_release:TUS.Script.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Script::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.Script.session_id)
}
inline std::string* Script::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.Script.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Script::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.Script.session_id)
}

// -------------------------------------------------------------------

// PairedStr

// string key = 1;
inline void PairedStr::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairedStr::key() const {
  // @@protoc_insertion_point(field_get:TUS.PairedStr.key)
  return _internal_key();
}
inline void PairedStr::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TUS.PairedStr.key)
}
inline std::string* PairedStr::mutable_key() {
  // @@protoc_insertion_point(field_mutable:TUS.PairedStr.key)
  return _internal_mutable_key();
}
inline const std::string& PairedStr::_internal_key() const {
  return key_.Get();
}
inline void PairedStr::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairedStr::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.PairedStr.key)
}
inline void PairedStr::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.PairedStr.key)
}
inline void PairedStr::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.PairedStr.key)
}
inline std::string* PairedStr::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairedStr::release_key() {
  // @@protoc_insertion_point(field_release:TUS.PairedStr.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairedStr::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.PairedStr.key)
}
inline std::string* PairedStr::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.PairedStr.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairedStr::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.PairedStr.key)
}

// string value = 2;
inline void PairedStr::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairedStr::value() const {
  // @@protoc_insertion_point(field_get:TUS.PairedStr.value)
  return _internal_value();
}
inline void PairedStr::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TUS.PairedStr.value)
}
inline std::string* PairedStr::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TUS.PairedStr.value)
  return _internal_mutable_value();
}
inline const std::string& PairedStr::_internal_value() const {
  return value_.Get();
}
inline void PairedStr::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairedStr::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.PairedStr.value)
}
inline void PairedStr::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.PairedStr.value)
}
inline void PairedStr::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.PairedStr.value)
}
inline std::string* PairedStr::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairedStr::release_value() {
  // @@protoc_insertion_point(field_release:TUS.PairedStr.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairedStr::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.PairedStr.value)
}
inline std::string* PairedStr::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.PairedStr.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairedStr::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.PairedStr.value)
}

// -------------------------------------------------------------------

// AsyncResult

// uint32 tag = 1;
inline void AsyncResult::clear_tag() {
  tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsyncResult::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsyncResult::tag() const {
  // @@protoc_insertion_point(field_get:TUS.AsyncResult.tag)
  return _internal_tag();
}
inline void AsyncResult::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_ = value;
}
inline void AsyncResult::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:TUS.AsyncResult.tag)
}

// int32 result_code = 2;
inline void AsyncResult::clear_result_code() {
  result_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncResult::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncResult::result_code() const {
  // @@protoc_insertion_point(field_get:TUS.AsyncResult.result_code)
  return _internal_result_code();
}
inline void AsyncResult::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_code_ = value;
}
inline void AsyncResult::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:TUS.AsyncResult.result_code)
}

// string result_text = 3;
inline void AsyncResult::clear_result_text() {
  result_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AsyncResult::result_text() const {
  // @@protoc_insertion_point(field_get:TUS.AsyncResult.result_text)
  return _internal_result_text();
}
inline void AsyncResult::set_result_text(const std::string& value) {
  _internal_set_result_text(value);
  // @@protoc_insertion_point(field_set:TUS.AsyncResult.result_text)
}
inline std::string* AsyncResult::mutable_result_text() {
  // @@protoc_insertion_point(field_mutable:TUS.AsyncResult.result_text)
  return _internal_mutable_result_text();
}
inline const std::string& AsyncResult::_internal_result_text() const {
  return result_text_.Get();
}
inline void AsyncResult::_internal_set_result_text(const std::string& value) {
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AsyncResult::set_result_text(std::string&& value) {
  
  result_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.AsyncResult.result_text)
}
inline void AsyncResult::set_result_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.AsyncResult.result_text)
}
inline void AsyncResult::set_result_text(const char* value,
    size_t size) {
  
  result_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.AsyncResult.result_text)
}
inline std::string* AsyncResult::_internal_mutable_result_text() {
  
  return result_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AsyncResult::release_result_text() {
  // @@protoc_insertion_point(field_release:TUS.AsyncResult.result_text)
  return result_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AsyncResult::set_allocated_result_text(std::string* result_text) {
  if (result_text != nullptr) {
    
  } else {
    
  }
  result_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.AsyncResult.result_text)
}
inline std::string* AsyncResult::unsafe_arena_release_result_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.AsyncResult.result_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AsyncResult::unsafe_arena_set_allocated_result_text(
    std::string* result_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result_text != nullptr) {
    
  } else {
    
  }
  result_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.AsyncResult.result_text)
}

// -------------------------------------------------------------------

// Session

// string id = 1;
inline void Session::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::id() const {
  // @@protoc_insertion_point(field_get:TUS.Session.id)
  return _internal_id();
}
inline void Session::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TUS.Session.id)
}
inline std::string* Session::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TUS.Session.id)
  return _internal_mutable_id();
}
inline const std::string& Session::_internal_id() const {
  return id_.Get();
}
inline void Session::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.Session.id)
}
inline void Session::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.Session.id)
}
inline void Session::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.Session.id)
}
inline std::string* Session::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_id() {
  // @@protoc_insertion_point(field_release:TUS.Session.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.Session.id)
}
inline std::string* Session::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.Session.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Session::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.Session.id)
}

// -------------------------------------------------------------------

// Updates

// int32 result_code = 1;
inline void Updates::clear_result_code() {
  result_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Updates::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Updates::result_code() const {
  // @@protoc_insertion_point(field_get:TUS.Updates.result_code)
  return _internal_result_code();
}
inline void Updates::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_code_ = value;
}
inline void Updates::set_result_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:TUS.Updates.result_code)
}

// repeated .TUS.PairedStr pairs = 2;
inline int Updates::_internal_pairs_size() const {
  return pairs_.size();
}
inline int Updates::pairs_size() const {
  return _internal_pairs_size();
}
inline void Updates::clear_pairs() {
  pairs_.Clear();
}
inline ::TUS::PairedStr* Updates::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TUS.Updates.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >*
Updates::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TUS.Updates.pairs)
  return &pairs_;
}
inline const ::TUS::PairedStr& Updates::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::TUS::PairedStr& Updates::pairs(int index) const {
  // @@protoc_insertion_point(field_get:TUS.Updates.pairs)
  return _internal_pairs(index);
}
inline ::TUS::PairedStr* Updates::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::TUS::PairedStr* Updates::add_pairs() {
  // @@protoc_insertion_point(field_add:TUS.Updates.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::PairedStr >&
Updates::pairs() const {
  // @@protoc_insertion_point(field_list:TUS.Updates.pairs)
  return pairs_;
}

// repeated .TUS.AsyncResult arets = 3;
inline int Updates::_internal_arets_size() const {
  return arets_.size();
}
inline int Updates::arets_size() const {
  return _internal_arets_size();
}
inline void Updates::clear_arets() {
  arets_.Clear();
}
inline ::TUS::AsyncResult* Updates::mutable_arets(int index) {
  // @@protoc_insertion_point(field_mutable:TUS.Updates.arets)
  return arets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::AsyncResult >*
Updates::mutable_arets() {
  // @@protoc_insertion_point(field_mutable_list:TUS.Updates.arets)
  return &arets_;
}
inline const ::TUS::AsyncResult& Updates::_internal_arets(int index) const {
  return arets_.Get(index);
}
inline const ::TUS::AsyncResult& Updates::arets(int index) const {
  // @@protoc_insertion_point(field_get:TUS.Updates.arets)
  return _internal_arets(index);
}
inline ::TUS::AsyncResult* Updates::_internal_add_arets() {
  return arets_.Add();
}
inline ::TUS::AsyncResult* Updates::add_arets() {
  // @@protoc_insertion_point(field_add:TUS.Updates.arets)
  return _internal_add_arets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TUS::AsyncResult >&
Updates::arets() const {
  // @@protoc_insertion_point(field_list:TUS.Updates.arets)
  return arets_;
}

// -------------------------------------------------------------------

// ExecuteAsyncParams

// string url = 1;
inline void ExecuteAsyncParams::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecuteAsyncParams::url() const {
  // @@protoc_insertion_point(field_get:TUS.ExecuteAsyncParams.url)
  return _internal_url();
}
inline void ExecuteAsyncParams::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:TUS.ExecuteAsyncParams.url)
}
inline std::string* ExecuteAsyncParams::mutable_url() {
  // @@protoc_insertion_point(field_mutable:TUS.ExecuteAsyncParams.url)
  return _internal_mutable_url();
}
inline const std::string& ExecuteAsyncParams::_internal_url() const {
  return url_.Get();
}
inline void ExecuteAsyncParams::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecuteAsyncParams::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.ExecuteAsyncParams.url)
}
inline void ExecuteAsyncParams::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.ExecuteAsyncParams.url)
}
inline void ExecuteAsyncParams::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.ExecuteAsyncParams.url)
}
inline std::string* ExecuteAsyncParams::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecuteAsyncParams::release_url() {
  // @@protoc_insertion_point(field_release:TUS.ExecuteAsyncParams.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteAsyncParams::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.ExecuteAsyncParams.url)
}
inline std::string* ExecuteAsyncParams::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.ExecuteAsyncParams.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecuteAsyncParams::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.ExecuteAsyncParams.url)
}

// uint32 tag = 2;
inline void ExecuteAsyncParams::clear_tag() {
  tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecuteAsyncParams::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExecuteAsyncParams::tag() const {
  // @@protoc_insertion_point(field_get:TUS.ExecuteAsyncParams.tag)
  return _internal_tag();
}
inline void ExecuteAsyncParams::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_ = value;
}
inline void ExecuteAsyncParams::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:TUS.ExecuteAsyncParams.tag)
}

// string session_id = 3;
inline void ExecuteAsyncParams::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecuteAsyncParams::session_id() const {
  // @@protoc_insertion_point(field_get:TUS.ExecuteAsyncParams.session_id)
  return _internal_session_id();
}
inline void ExecuteAsyncParams::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:TUS.ExecuteAsyncParams.session_id)
}
inline std::string* ExecuteAsyncParams::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:TUS.ExecuteAsyncParams.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ExecuteAsyncParams::_internal_session_id() const {
  return session_id_.Get();
}
inline void ExecuteAsyncParams::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecuteAsyncParams::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.ExecuteAsyncParams.session_id)
}
inline void ExecuteAsyncParams::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.ExecuteAsyncParams.session_id)
}
inline void ExecuteAsyncParams::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.ExecuteAsyncParams.session_id)
}
inline std::string* ExecuteAsyncParams::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecuteAsyncParams::release_session_id() {
  // @@protoc_insertion_point(field_release:TUS.ExecuteAsyncParams.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteAsyncParams::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.ExecuteAsyncParams.session_id)
}
inline std::string* ExecuteAsyncParams::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.ExecuteAsyncParams.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecuteAsyncParams::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.ExecuteAsyncParams.session_id)
}

// -------------------------------------------------------------------

// SetEnvironmentParams

// .TUS.Session session = 1;
inline bool SetEnvironmentParams::_internal_has_session() const {
  return this != internal_default_instance() && session_ != nullptr;
}
inline bool SetEnvironmentParams::has_session() const {
  return _internal_has_session();
}
inline void SetEnvironmentParams::clear_session() {
  if (GetArena() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
}
inline const ::TUS::Session& SetEnvironmentParams::_internal_session() const {
  const ::TUS::Session* p = session_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TUS::Session*>(
      &::TUS::_Session_default_instance_);
}
inline const ::TUS::Session& SetEnvironmentParams::session() const {
  // @@protoc_insertion_point(field_get:TUS.SetEnvironmentParams.session)
  return _internal_session();
}
inline void SetEnvironmentParams::unsafe_arena_set_allocated_session(
    ::TUS::Session* session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.SetEnvironmentParams.session)
}
inline ::TUS::Session* SetEnvironmentParams::release_session() {
  auto temp = unsafe_arena_release_session();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TUS::Session* SetEnvironmentParams::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:TUS.SetEnvironmentParams.session)
  
  ::TUS::Session* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::TUS::Session* SetEnvironmentParams::_internal_mutable_session() {
  
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::TUS::Session>(GetArena());
    session_ = p;
  }
  return session_;
}
inline ::TUS::Session* SetEnvironmentParams::mutable_session() {
  // @@protoc_insertion_point(field_mutable:TUS.SetEnvironmentParams.session)
  return _internal_mutable_session();
}
inline void SetEnvironmentParams::set_allocated_session(::TUS::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:TUS.SetEnvironmentParams.session)
}

// string key = 2;
inline void SetEnvironmentParams::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetEnvironmentParams::key() const {
  // @@protoc_insertion_point(field_get:TUS.SetEnvironmentParams.key)
  return _internal_key();
}
inline void SetEnvironmentParams::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TUS.SetEnvironmentParams.key)
}
inline std::string* SetEnvironmentParams::mutable_key() {
  // @@protoc_insertion_point(field_mutable:TUS.SetEnvironmentParams.key)
  return _internal_mutable_key();
}
inline const std::string& SetEnvironmentParams::_internal_key() const {
  return key_.Get();
}
inline void SetEnvironmentParams::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetEnvironmentParams::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.SetEnvironmentParams.key)
}
inline void SetEnvironmentParams::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.SetEnvironmentParams.key)
}
inline void SetEnvironmentParams::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.SetEnvironmentParams.key)
}
inline std::string* SetEnvironmentParams::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetEnvironmentParams::release_key() {
  // @@protoc_insertion_point(field_release:TUS.SetEnvironmentParams.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetEnvironmentParams::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.SetEnvironmentParams.key)
}
inline std::string* SetEnvironmentParams::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.SetEnvironmentParams.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetEnvironmentParams::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.SetEnvironmentParams.key)
}

// string value = 3;
inline void SetEnvironmentParams::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetEnvironmentParams::value() const {
  // @@protoc_insertion_point(field_get:TUS.SetEnvironmentParams.value)
  return _internal_value();
}
inline void SetEnvironmentParams::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TUS.SetEnvironmentParams.value)
}
inline std::string* SetEnvironmentParams::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TUS.SetEnvironmentParams.value)
  return _internal_mutable_value();
}
inline const std::string& SetEnvironmentParams::_internal_value() const {
  return value_.Get();
}
inline void SetEnvironmentParams::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetEnvironmentParams::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TUS.SetEnvironmentParams.value)
}
inline void SetEnvironmentParams::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TUS.SetEnvironmentParams.value)
}
inline void SetEnvironmentParams::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TUS.SetEnvironmentParams.value)
}
inline std::string* SetEnvironmentParams::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetEnvironmentParams::release_value() {
  // @@protoc_insertion_point(field_release:TUS.SetEnvironmentParams.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetEnvironmentParams::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TUS.SetEnvironmentParams.value)
}
inline std::string* SetEnvironmentParams::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TUS.SetEnvironmentParams.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetEnvironmentParams::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TUS.SetEnvironmentParams.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TUS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dc_2eproto
